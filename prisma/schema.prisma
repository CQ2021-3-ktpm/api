datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

model User {
  user_id       String    @id @default(cuid())
  role          Role      @default(USER)
  name          String
  email         String    @unique
  phone_number  String    @unique @default(cuid())
  password_hash String
  avatar_url    String?
  birthdate     DateTime?
  gender        Gender?
  status        Status    @default(ACTIVE)
  is_verified   Boolean   @default(false)
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt

  // Relationships
  brands             Brand[]            @relation("UserBrands")
  invitations        Invitation[]       @relation("UserInvitations")
  Credit             Credit[]
  UserVoucher        UserVoucher[]
  campaign_wishlists CampaignWishlist[]
  notifications      Notification[]
}

model Brand {
  brand_id   String   @id @default(cuid())
  user_id    String
  name       String
  industry   String
  address    String
  latitude   Float?
  longitude  Float?
  status     Status   @default(ACTIVE)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relationships
  user      User       @relation("UserBrands", fields: [user_id], references: [user_id])
  campaigns Campaign[]
}

model Game {
  game_id               String   @id @default(cuid())
  brand_id              String
  campaign_id           String
  name                  String
  type                  String
  instructions          String
  image_url             String?
  item_exchange_enabled Boolean  @default(false)
  status                Status   @default(ACTIVE)
  created_at            DateTime @default(now())
  updated_at            DateTime @updatedAt

  @@unique([brand_id, campaign_id])
}

model Campaign {
  campaign_id String   @id @default(cuid())
  brand_id    String
  name        String
  image_url   String?
  start_date  DateTime
  end_date    DateTime
  description String
  category_id String
  games       String[]
  status      Status   @default(ACTIVE)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // Relationships
  brand         Brand              @relation(fields: [brand_id], references: [brand_id])
  vouchers      Voucher[]
  Category      Category?          @relation(fields: [category_id], references: [category_id])
  wishlists     CampaignWishlist[]
  notifications Notification[]
}

model Category {
  category_id String   @id @default(cuid())
  name        String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // Relationships
  campaigns Campaign[]
}

model Voucher {
  voucher_id      String   @id @default(cuid())
  campaign_id     String
  value           Float
  quantity        Int
  description     String?
  expiration_date DateTime
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  // Relationships
  campaign    Campaign      @relation(fields: [campaign_id], references: [campaign_id])
  UserVoucher UserVoucher[]
}

model UserVoucher {
  user_voucher_id String        @id @default(cuid())
  user_id         String
  voucher_id      String
  quantity        Int           @default(1)
  code            String        @unique
  qr_code         String?       @unique
  assigned_at     DateTime      @default(now())
  used_at         DateTime?
  status          VoucherStatus @default(UNUSED)

  // Relationships
  user    User    @relation(fields: [user_id], references: [user_id])
  voucher Voucher @relation(fields: [voucher_id], references: [voucher_id])

  @@unique([user_id, voucher_id, assigned_at])
}

model Notification {
  notification_id String             @id @default(cuid())
  user_id         String
  campaign_id     String
  message         String
  type            NotificationType
  status          NotificationStatus @default(UNREAD)
  created_at      DateTime           @default(now())

  user     User     @relation(fields: [user_id], references: [user_id])
  campaign Campaign @relation(fields: [campaign_id], references: [campaign_id])
}

model Credit {
  credit_id    String   @id @default(cuid())
  player_id    String
  credits      Int
  credits_used Int      @default(0)
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  // Relationships
  user User @relation(fields: [player_id], references: [user_id])
}

model Invitation {
  invitation_id String           @id @default(cuid())
  email         String
  user_id       String
  status        InvitationStatus @default(PENDING)
  expiresAt     DateTime
  created_at    DateTime         @default(now())
  updated_at    DateTime         @updatedAt

  // Relationships
  user User @relation("UserInvitations", fields: [user_id], references: [user_id])
}

model CampaignWishlist {
  wishlist_id String   @id @default(cuid())
  user_id     String
  campaign_id String
  created_at  DateTime @default(now())

  // Relationships
  user     User     @relation(fields: [user_id], references: [user_id])
  campaign Campaign @relation(fields: [campaign_id], references: [campaign_id])

  @@unique([user_id, campaign_id])
}

enum Role {
  ADMIN
  BRAND
  USER
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum Status {
  ACTIVE
  INACTIVE
}

enum VoucherStatus {
  UNUSED
  USED
  EXPIRED
}

enum MessageType {
  EVENT
  REWARD
  ERROR
}

enum NotificationStatus {
  READ
  UNREAD
}

enum InvitationStatus {
  ACCEPTED
  REJECTED
  PENDING
}

enum NotificationType {
  CAMPAIGN_START_24H
  CAMPAIGN_START_30MIN
}
